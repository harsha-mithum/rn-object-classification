# This GitHub Actions workflow automates the process of building and deploying a 
# React Native Android app to the Google Play Console for closed testing.

name: Deploy Android to Play Console

# 1. TRIGGER
# This workflow runs on a push to the 'main' branch or can be triggered manually.
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy to Play Console
    runs-on: ubuntu-latest # Use a Linux-based runner for Android builds

    steps:
      # 2. CHECKOUT CODE
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 3. SETUP ENVIRONMENT
      # Set up the Java Development Kit (JDK), required for Android builds.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Set up Node.js for React Native. Caches dependencies for faster builds.
      - name: Set up Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      # 4. INSTALL DEPENDENCIES
      - name: Install NPM Dependencies
        run: npm ci

      # 5. SETUP ANDROID SIGNING
      # Decode the base64 keystore from GitHub Secrets and place it in the project.
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'android/app/my-release-key.keystore'
          encodedString: ${{ secrets.ANDROID_RELEASE_KEYSTORE_BASE64 }}

      # 6. GRANT GRADLEW PERMISSIONS
      # Add execute permissions to the gradlew script to prevent permission errors.
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 7. BUILD ANDROID APP BUNDLE (APK)
      # Run the Gradle command to build a signed release APK.
      # Credentials are passed securely as environment variables.
      - name: Build Android Release APK
        run: |
          cd android && ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}

      # 8. DEPLOY TO GOOGLE PLAY (DISABLED FOR PRACTICE)
      # This step is commented out. The workflow will stop after building the AAB.
      # To enable deployment, remove the '#' from the lines below and ensure you
      # have the GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret configured.
      # - name: Upload AAB to Play Console
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     # The service account JSON key, retrieved from secrets.
      #     serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
      #     # Your app's package name (e.g., com.example.app).
      #     packageName: com.your.packagename 
      #     # The path to the generated AAB file.
      #     releaseFiles: android/app/build/outputs/apk/release/app-release.apk
      #     # Target track for the upload (e.g., internal, alpha, beta, production).
      #     track: internal 
      #     # Optional: A short description of the changes in this release.
      #     whatsNewDirectory: whatsnew/
          
      # 9. UPLOAD ARTIFACT
      # Upload the APK as a build artifact to the GitHub Actions run for manual download.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

